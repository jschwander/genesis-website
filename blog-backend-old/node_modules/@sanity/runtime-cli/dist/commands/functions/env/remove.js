import { Args } from '@oclif/core';
import chalk from 'chalk';
import ora from 'ora';
import { remove } from '../../../actions/functions/env/remove.js';
import { DeployedBlueprintCommand } from '../../../baseCommands.js';
import { findFunctionByName } from '../../../utils/find-function.js';
export default class EnvRemoveCommand extends DeployedBlueprintCommand {
    static args = {
        name: Args.string({ description: 'The name of the Sanity Function', required: true }),
        key: Args.string({ description: 'The name of the environment variable', required: true }),
    };
    static description = 'Remove an environment variable for a Sanity function';
    static examples = ['<%= config.bin %> <%= command.id %> MyFunction API_URL'];
    async run() {
        const args = this.args;
        const spinner = ora(`Removing "${args.key}" environment variable in "${args.name}"`).start();
        const { externalId } = findFunctionByName(this.deployedStack, args.name);
        const result = await remove(externalId, args.key, this.auth);
        if (result.ok) {
            spinner.succeed(`Removal of ${args.key} succeeded`);
        }
        else {
            spinner.fail(`${chalk.red('Failed')} to remove ${args.key}`);
            this.log(`Error: ${result.error || 'Unknown error'}`);
        }
    }
}
