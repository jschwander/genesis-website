import { mkdirSync, writeFileSync } from 'node:fs';
import { existsSync } from 'node:fs';
import { dirname, join } from 'node:path';
import { cwd } from 'node:process';
import { addResourceToBlueprint } from './blueprint.js';
const DEFAULT_FUNCTION_TEMPLATE = /*js*/ `export async function handler({context, event}) {
  const time = new Date().toLocaleTimeString()
  console.log(\`ðŸ‘‹ Your Sanity Function was called at \${time}\`)
}`;
const DEFAULT_PACKAGE_JSON = {
    name: '',
    type: 'module',
    main: '',
};
/**
 * Creates a new function resource file and adds it to the blueprint
 */
export function createFunctionResource(options) {
    const { name, type, lang, displayName = name, blueprintFilePath } = options;
    let workingDir = cwd();
    if (blueprintFilePath) {
        if (!existsSync(blueprintFilePath)) {
            throw Error(`Blueprint file not found: ${blueprintFilePath}`);
        }
        workingDir = dirname(blueprintFilePath);
    }
    // Ensure functions directory exists
    const functionsDir = join(workingDir, 'functions');
    if (!existsSync(functionsDir)) {
        mkdirSync(functionsDir, { recursive: true });
    }
    // Create function directory
    const functionDir = join(functionsDir, name);
    if (!existsSync(functionDir)) {
        mkdirSync(functionDir, { recursive: true });
    }
    if (!['ts', 'js'].includes(lang))
        throw Error(`Unsupported language: ${lang}`);
    // Create index.<lang> with default template
    const indexPath = join(functionDir, `index.${lang}`);
    writeFileSync(indexPath, DEFAULT_FUNCTION_TEMPLATE);
    // Create package.json
    const packagePath = join(functionDir, 'package.json');
    const packageContent = {
        ...DEFAULT_PACKAGE_JSON,
        name,
        main: `index.${lang}`,
    };
    writeFileSync(packagePath, JSON.stringify(packageContent, null, 2));
    // type looks like 'document-publish'
    const typeParts = type.split('-');
    const typeName = typeParts[0];
    const eventOn = typeParts[1];
    // Create resource definition
    const resourceJson = {
        displayName,
        name,
        src: `functions/${name}`,
        type: `sanity.function.${typeName}`,
        event: {
            on: [eventOn],
        },
    };
    // Add to blueprint or return for manual addition
    const resource = addResourceToBlueprint({ blueprintFilePath, resource: resourceJson });
    return {
        filePath: indexPath,
        resourceAdded: !resource, // If resource is null, it was added to blueprint
        resource: resource || resourceJson,
    };
}
