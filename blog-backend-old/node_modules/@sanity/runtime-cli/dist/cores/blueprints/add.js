import { cwd } from 'node:process';
import chalk from 'chalk';
import highlight from 'color-json';
import inquirer from 'inquirer';
import { findBlueprintFile } from '../../actions/blueprints/blueprint.js';
import { createFunctionResource } from '../../actions/blueprints/resources.js';
import { validateFunctionName } from '../../utils/validate/resource.js';
export async function blueprintAddCore(options) {
    const { bin = 'sanity', log, args, flags } = options;
    const { type: resourceType } = args;
    const { name: flagResourceName, 'fn-type': flagFnType, javascript: flagJs } = flags;
    let { language: flagFnLang } = flags;
    flagFnLang = flagJs ? 'js' : flagFnLang;
    try {
        if (resourceType !== 'function') {
            return {
                success: false,
                error: `Unsupported Resource type: ${resourceType}`,
            };
        }
        const existingBlueprint = findBlueprintFile();
        if (!existingBlueprint) {
            return {
                success: false,
                error: `No Blueprint file found. Run \`${bin} blueprints init\` first.`,
            };
        }
        const fnName = flagResourceName || (await promptForFunctionName());
        if (!validateFunctionName(fnName)) {
            throw new Error('Invalid function name. Must be 6+ characters, no special characters, no spaces');
        }
        const fnType = flagFnType || (await promptForFunctionType());
        const fnLang = flagFnLang || (await promptForFunctionLang());
        if (!['document-publish', 'document-create', 'document-delete'].includes(fnType)) {
            throw new Error('Invalid function type. Must be one of: document-publish, document-create, document-delete');
        }
        const { filePath, resourceAdded, resource } = createFunctionResource({
            name: fnName,
            type: fnType,
            lang: fnLang,
            displayName: fnName,
        });
        log(`\nCreated function: ${filePath.replace(cwd(), '')}`);
        if (!resourceAdded) {
            // print the resource JSON for manual addition
            log('\nAdd this Function resource to your blueprint:');
            log(highlight(JSON.stringify(resource, null, 2)));
        }
        else {
            // added to blueprint.json
            log(`Function "${chalk.bold(fnName)}" added to blueprint file.`);
        }
        if (fnLang === 'ts') {
            log(chalk.dim('Add "functions/**/.build/**" to your .gitignore.'));
        }
        return { success: true };
    }
    catch (err) {
        const errorMessage = err instanceof Error ? err.message : String(err);
        return {
            success: false,
            error: errorMessage,
        };
    }
}
async function promptForFunctionName() {
    const { functionName } = await inquirer.prompt([
        {
            type: 'input',
            name: 'functionName',
            message: 'Enter function name:',
            validate: (input) => input.length > 0 || 'Function name is required',
        },
    ]);
    return functionName;
}
async function promptForFunctionType() {
    const { functionType } = await inquirer.prompt([
        {
            type: 'list',
            name: 'functionType',
            message: 'Choose function type:',
            choices: [
                { name: 'Document Publish', value: 'document-publish' },
                { name: 'Document Create', value: 'document-create', disabled: true },
                { name: 'Document Delete', value: 'document-delete', disabled: true },
            ],
            default: 'document-publish',
        },
    ]);
    return functionType;
}
async function promptForFunctionLang() {
    const { functionLang } = await inquirer.prompt([
        {
            type: 'list',
            name: 'functionLang',
            message: 'Choose function language:',
            choices: [
                { name: 'TypeScript', value: 'ts' },
                { name: 'JavaScript', value: 'js' },
            ],
            default: 'ts',
        },
    ]);
    return functionLang;
}
